// <auto-generated />
using System;
using DesafioBackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesafioBackEnd.Migrations
{
    [DbContext(typeof(FrutariaContext))]
    [Migration("20231106031919_venda-pago")]
    partial class vendapago
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DesafioBackEnd.Models.EMPRESAS", b =>
                {
                    b.Property<long>("idEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("idEmpresa"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegimeTributario")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("idEmpresa");

                    b.ToTable("EMPRESAS");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.FORNECEDORES", b =>
                {
                    b.Property<long>("idFornecedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("idFornecedor"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CPNJ")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefone1")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Telefone2")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("idFornecedor");

                    b.ToTable("FORNECEDORES");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.LOTES", b =>
                {
                    b.Property<long>("idLote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("idLote"));

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataValidade")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProdutoidProduto")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<long>("idFornecedor")
                        .HasColumnType("bigint");

                    b.Property<long>("idProduto")
                        .HasColumnType("bigint");

                    b.HasKey("idLote");

                    b.HasIndex("ProdutoidProduto");

                    b.HasIndex("idFornecedor");

                    b.ToTable("LOTES");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.PRODUTOS", b =>
                {
                    b.Property<long>("idProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("idProduto"));

                    b.Property<float>("COFINS")
                        .HasColumnType("real");

                    b.Property<int>("EstoqueAtual")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueInicial")
                        .HasColumnType("int");

                    b.Property<int>("EstoqueMinimo")
                        .HasColumnType("int");

                    b.Property<long>("FornecedoridFornecedor")
                        .HasColumnType("bigint");

                    b.Property<float>("ICMS")
                        .HasColumnType("real");

                    b.Property<float>("ISS")
                        .HasColumnType("real");

                    b.Property<float>("LUCRO")
                        .HasColumnType("real");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("PrecoCusto")
                        .HasColumnType("real");

                    b.Property<float>("PrecoVenda")
                        .HasColumnType("real");

                    b.Property<long>("UsuarioidUsuario")
                        .HasColumnType("bigint");

                    b.Property<long>("idFornecedor")
                        .HasColumnType("bigint");

                    b.Property<long>("idUsuario")
                        .HasColumnType("bigint");

                    b.HasKey("idProduto");

                    b.HasIndex("FornecedoridFornecedor");

                    b.HasIndex("UsuarioidUsuario");

                    b.ToTable("PRODUTOS");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.PRODUTO_VENDAS", b =>
                {
                    b.Property<long>("idVenda")
                        .HasColumnType("bigint");

                    b.Property<long>("idProduto")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("idVenda", "idProduto");

                    b.HasIndex("idProduto");

                    b.ToTable("PRODUTO_VENDAS");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.USUARIOS", b =>
                {
                    b.Property<long>("idUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("idUsuario"));

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<long>("idEmpresa")
                        .HasColumnType("bigint");

                    b.HasKey("idUsuario");

                    b.HasIndex("idEmpresa");

                    b.ToTable("USUARIOS");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.VENDAS", b =>
                {
                    b.Property<long>("idVenda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("idVenda"));

                    b.Property<DateTime>("DataVenda")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Pago")
                        .HasColumnType("bit");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.Property<long>("idUsuario")
                        .HasColumnType("bigint");

                    b.HasKey("idVenda");

                    b.HasIndex("idUsuario");

                    b.ToTable("VENDAS");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.LOTES", b =>
                {
                    b.HasOne("DesafioBackEnd.Models.PRODUTOS", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoidProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesafioBackEnd.Models.FORNECEDORES", "FORNECEDORES")
                        .WithMany("LOTES")
                        .HasForeignKey("idFornecedor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FORNECEDORES");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.PRODUTOS", b =>
                {
                    b.HasOne("DesafioBackEnd.Models.FORNECEDORES", "Fornecedor")
                        .WithMany("PRODUTOS")
                        .HasForeignKey("FornecedoridFornecedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesafioBackEnd.Models.USUARIOS", "Usuario")
                        .WithMany("PRODUTOS")
                        .HasForeignKey("UsuarioidUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fornecedor");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.PRODUTO_VENDAS", b =>
                {
                    b.HasOne("DesafioBackEnd.Models.PRODUTOS", "Produto")
                        .WithMany("PRODUTO_VENDAS")
                        .HasForeignKey("idProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DesafioBackEnd.Models.VENDAS", "Venda")
                        .WithMany("PRODUTO_VENDAS")
                        .HasForeignKey("idVenda")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Venda");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.USUARIOS", b =>
                {
                    b.HasOne("DesafioBackEnd.Models.EMPRESAS", "Empresa")
                        .WithMany("USUARIOS")
                        .HasForeignKey("idEmpresa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.VENDAS", b =>
                {
                    b.HasOne("DesafioBackEnd.Models.USUARIOS", "Usuario")
                        .WithMany("VENDAS")
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.EMPRESAS", b =>
                {
                    b.Navigation("USUARIOS");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.FORNECEDORES", b =>
                {
                    b.Navigation("LOTES");

                    b.Navigation("PRODUTOS");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.PRODUTOS", b =>
                {
                    b.Navigation("PRODUTO_VENDAS");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.USUARIOS", b =>
                {
                    b.Navigation("PRODUTOS");

                    b.Navigation("VENDAS");
                });

            modelBuilder.Entity("DesafioBackEnd.Models.VENDAS", b =>
                {
                    b.Navigation("PRODUTO_VENDAS");
                });
#pragma warning restore 612, 618
        }
    }
}
